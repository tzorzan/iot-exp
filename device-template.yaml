Parameters:
  IoTExpStackName:
    Description: Name of the IoT Exp stack
    Type: String
    AllowedPattern: "^[a-zA-Z0-9\\-]*$"
    MinLength: '1'
    MaxLength: '64'
    ConstraintDescription: Must contain only alphanumberic characters and hyphen-minus
    Default: iotexp
  DeviceID:
    Description: ID of the device
    Type: String
    AllowedPattern: "[a-zA-Z0-9_/#+]*"
    MinLength: '1'
    MaxLength: '2048'
    ConstraintDescription: Must contain only alphanumberic characters and underscores
Resources:
  ShadowUpdateTopicRule:
    Type: "AWS::IoT::TopicRule"
    Properties:
      TopicRulePayload:
        AwsIotSqlVersion: "2016-03-23"
        Description: "Save the thing shadow update."
        RuleDisabled: "false"
        Sql:
          Fn::Join: [ "", ["SELECT state.reported.* FROM '$aws/things/", { "Ref": "DeviceID" }, "/shadow/update/accepted'"] ]
        Actions:
          - DynamoDB:
              TableName:
                Fn::ImportValue:
                  !Sub "${IoTExpStackName}-DynamoDBTable"
              HashKeyField: deviceid
              HashKeyValue: "${topic(3)}"
              RangeKeyField: deviceid
              RangeKeyValue: "${topic(3)}"
              PayloadField: "state"
              RoleArn:
                Fn::ImportValue:
                  !Sub "${IoTExpStackName}-DynamoDBTableRolePutItemArn"
  SensorUpdateTopicRule:
    Type: "AWS::IoT::TopicRule"
    Properties:
      TopicRulePayload:
        AwsIotSqlVersion: "2016-03-23"
        Description: "Call lambda when sensor state change in the thing shadow."
        RuleDisabled: "false"
        Sql:
          Fn::Join: [ "", ["SELECT topic(3) AS thing, state FROM '$aws/things/", { "Ref": "DeviceID" }, "/shadow/update/delta'", " WHERE NOT isUndefined(state.sensor)"] ]
        Actions:
          - Lambda:
              FunctionArn:
                Fn::ImportValue:
                  !Sub "${IoTExpStackName}-SensorUpdateFunctionArn"
  SensorUpdateInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      SourceArn: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":rule/", !Ref "SensorUpdateTopicRule" ] ]
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      FunctionName:
        Fn::ImportValue:
          !Sub "${IoTExpStackName}-SensorUpdateFunctionArn"
      SourceAccount: !Ref AWS::AccountId
  DeviceConnectedTopicRule:
    Type: "AWS::IoT::TopicRule"
    Properties:
      TopicRulePayload:
        AwsIotSqlVersion: "2016-03-23"
        Description: "Call lambda when device is connected."
        RuleDisabled: "false"
        Sql:
          Fn::Join: [ "", ["SELECT * FROM '$aws/events/presence/connected/", { "Ref": "DeviceID" }, "'"] ]
        Actions:
          - Lambda:
              FunctionArn:
                Fn::ImportValue:
                  !Sub "${IoTExpStackName}-DeviceConnectedFunctionArn"
  DeviceConnectedInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      SourceArn: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":rule/", !Ref "DeviceConnectedTopicRule" ] ]
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      FunctionName:
        Fn::ImportValue:
          !Sub "${IoTExpStackName}-DeviceConnectedFunctionArn"
      SourceAccount: !Ref AWS::AccountId
